Bonus Article
Nested Loops
# Loops Revisited
Loops allow you to repeatedly execute a block of code, making your programs more efficient and powerful. Doing repetitive work is what computers are best at!

Before delving into nested loops, let's quickly recap JavaScript loops in general:

// while loop
let countdown = 3;
while (countdown > 0) {
  console.log(countdown);
  countdown--;
}
console.log("Liftoff! ðŸš€");

// for loop
for (let i = 0; i < 9; i++) {
  console.log(i);
}

while loops let us run a block of code for as long as a certain condition is true.
for loops allow us to run a code block a specific number of times.
In the examples above, the while loop runs as long as the value of countdown is above zero, whereas the for loop will run nine times, and log the values of i from 0 to 8.

But what if we need to perform a repetitive task within another repetitive task? You're gonna need a nested loop.

# Nested Loops
A nested loop occurs when there is a conditional statement inside another conditional statement. A loop inside another loop.

Letâ€™s think about the solar system; in the solar system, Earth is simultaneously rotating around the sun while the moon rotates around the Earth. These events occur concurrently and if one were to stop, the whole solar system would too.

This is just like nested loops!

Solar System

Nested loops help us identify when specific conditions are met. Remember that the inside loop will not run if the outer loop does not run.

Nested loops use the if and for keywords to tell the computer the steps to take in a program based on certain conditions. The inner loop executes its entire cycle for each iteration of the outer loop. Let's illustrate this with an example.

# Real-World Example: Multiplication Table
One common use case for nested loops is generating a multiplication table. Let's create a simple 3x3 multiplication table:

for (let i = 1; i <= 3; i++) {
  for (let j = 1; j <= 3; j++) {
    console.log(`${i} * ${j} = ${i * j}`);
  }
}

Here, we have two nested for loops. Let's go step by step:

Outer i Loop:
let i = 1;: We initialize a variable i with the value 1.
i <= 3;: The loop will continue as long as i is less than or equal to 3.
i++: After each iteration, increment i by 1.
So, the outer loop will run for i values of 1, 2, and 3.

Inner j Loop:
let j = 1;: We initialize a variable j with the value 1.
j <= 3;: The loop will continue as long as j is less than or equal to 3.
j++: After each iteration, increment j by 1.
The inner loop runs completely for each iteration of the outer loop. So, for every value of i (1, 2, 3), the inner loop will run for j values of 1, 2, and 3.

Logging the Table
Inside the inner loop, we log the multiplication of i and j with console.log(``${i} * ${j} = ${i * j}``);. This gives us each multiplication operation within the specified range.

This code will output the following:

1 * 1 = 1
1 * 2 = 2
1 * 3 = 3
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
3 * 1 = 3
3 * 2 = 6
3 * 3 = 9

The logic works like this:

The outer loop controls the rows of the table (i values).
The inner loop controls the columns of the table (j values).
These nested loops cover all possible pairs of i and j values, resulting in a complete multiplication table.

# Conclusion
Although a bit intimidating, mastering the concept of nested loops in JavaScript is a critical tool for solving complex data structures & algorithm problems. Remember: it's all about the patterns through repetition.
