05. Bad Eggs
# 2D Arrays
So far in this course, weâ€™ve been only working with 1D (1-dimensional) arrays:

arr = np.array([1, 2, 3, 4, 5, 6]) 

2D arrays have 1D arrays as elements, meaning arrays within an array.

For example:

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 

We can also write the same 2D array in a grid format (easier for the eyes):

arr = np.array([
  [1, 2, 3], 
  [4, 5, 6],
  [7, 8, 9]
]) 

The element at index 0 is [1, 2, 3].
The element at index 1 is [4, 5, 6].
The element at index 2 is [7, 8, 9].
To output each of the elements:

print(arr[0])     # Output: [1, 2, 3]
print(arr[1])     # Output: [4, 5, 6]
print(arr[2])     # Output: [7, 8, 9]

We can also be more specific with arr[row][column]. For example:

print(arr[0][0])  # Output: 1
print(arr[0][2])  # Output: 3
print(arr[2][2])  # Output: 9

# Examples of 2D Arrays
2D arrays appear more often than you think in real-world datasets.

For example, a seating plan for a room:

seating_plan = np.array([
  [0, 1, 3], 
  [2, 9, 5],
  [6, 7, 10]
]) 

A monthly budget (organized by month and category):

monthly_budget = np.array([
  [453.88, 192.44, 1750.00, 980.41, 578.22],   # month 1
  [689.77, 256.81, 1750.00, 865.34, 356.84],   # month 2
  [589.23, 293.42, 1850.00, 873.45, 789.23]    # month 3
]) 

A grade book where rows correspond to individual students and columns to scores:

gradebook = np.array([
  [98, 98, 90, 84, 93, 73, 80],                # student 1
  [93, 95, 75, 90, 89, 84, 76],                # student 2
  [90, 89, 88, 84, 90, 67, 72],                # student 3
  [89, 84, 69, 74, 84, 70, 72]                 # student 4
]) 
