The File Realm
# Opening Files
When handling a file, you have to open it first. üîë

In Python, we use the open() function:

file = open(file_path, mode)

This function returns an object that we can save to a variable like file.

The open() function takes two arguments:

The file_path, such as 'filename.txt'.
The mode for how to use the file.
There are three modes you can open a file with:

'r' for reading a file. üìñ
'w' for writing to a file. ‚úçüèº
'a' for writing from the end of a file. üìù
Note: Be careful with 'w' mode. It will overwrite any existing file content. Use 'a' to avoid this.

# Writing to Files
You can write to a file with various methods. The write() method simply writes data to a file:

file.write('text')

A string is passed to the write() method, and written to the file.

To write on multiple lines, this method must be used multiple times with the \n newline character:

file.write('This is a line.\n')
file.write('This is the next line.\n')

You can also write multiple lines to a file at once with the writelines() method:

lines = ['This is a line.\n', 'This is the next line.\n']

file.writelines(lines)

The writelines() method takes a list of lines and writes them to the file.

# Reading Files
To read from files, you have options as well.

The .read() method lets you read the entire content of a file. This method can be saved to a variable and printed to the terminal:

file = open('filename.txt', 'r')

content = file.read()

print('Using read():')
print(content)

The .readline() method lets you read a file one line at a time:

line1 = file.readline()  # Read the first line
print(line1, end='')     # Printing the first line

line2 = file.readline()  # Read the second line
print(line2, end='')     # Printing the second line

To print each line on a single line without adding a '\n' newline character at the end, we use the end='' option in the print() function.

Note: By default, print() ends with a '\n' newline character.

The .readlines() method lets you read all lines in a list:

lines = file.readlines()

for line in lines:
  print(line, end='')

# Closing Files
In Python, the .close() method is used to finish working with a file and free up resources.

# Opens file to read
file = open('filename.txt', 'r')

# Closes file
file.close()

Always call .close() after reading or writing to the file to ensure everything is saved.

You can also use a with block to open a file, handle it, and close it automatically:

with open('filename', 'r') as f:
  # handle file here

No .close() method necessary!
