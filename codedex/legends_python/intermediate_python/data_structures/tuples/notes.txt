Find My Friends
# Tuples
Tuples are ordered collections that cannot be changed once created. They are ideal for storing fixed data that shouldn't change (e.g., coordinates, RGB color values).

While lists can change, tuples cannot. This means tuples are immutable.

However, you can replace one tuple with another and have duplicates within a tuple.

# Syntax
Lists and tuples have a few things in common:

They can store multiple items in a single variable.
Their values are separated by commas.
However, tuples use a different syntax:

tuple_example = (1, '2', True)
navy_blue = (0, 0, 128)

Tuples are defined with or without parentheses and their items can be a mix of any data type. They can have one or more items.

If there is only one item, make sure there is a comma , beside it:

# valid tuple
t1 = ('a',)

# valid tuple
t2 = 'a',

# NOT a tuple
t3 = ('a')

# Creating and Accessing Tuples
For example, a DNA sequence would be stored as a tuple since it contains very important values that should not be changed and should not change when referenced without.

my_dna = ('GCT', 'AGC', 'AGG', 'TAA', 'ACT', 'CAT')

You can access tuple items the same way you do with lists... using the index! If we want to get the 3rd item in our my_dna tuple:

print(my_dna[2]) # Output: AGG

Because tuples are an ordered collection, you can look up their items by index.

# Using Tuples
Tuples are also unpackable which allows you to easily turn them into variables. Most commonly, tuples are used as return values allowing you to easily work with large data sets.

full_name = ('Ada', 'Lovelace')

first_name = full_name[0]

print(first_name) # Output: Ada

Tuples can also be combined:

# Combining tuples
t1 = 'a',
t2 = 'b',
t3 = t1 + t2

print(t3)  # Output: ('a', 'b')


