03. Mobile Apps
# Data Exploration
Pandas is great for working with datasets containing thousands of rows. But when you're staring at a massive table, it can be hard to know where to begin.

Here are four pandas methods that can help with some basic data exploration:

.head()
.tail()
.info()
.describe()
## View Rows with .head() and .tail()
If your dataset is huge, printing the whole thing would flood your screen with way too much info. This is where .head() and .tail() come in. These methods display the first 5 and last 5 rows (by default) of the DataFrame, respectively.

Assume we have a DataFrame named df:

df.head()     # Displays the first 5 rows
df.tail()     # Displays the last 5 rows

If you want more than 5 rows, you can pass in a specific number. For example, this will display the first 10 rows:

df.head(10)   # Displays the first 10 rows

## Data Types and Missing Values with .info()
The .info() method will show you information about specific columns.

Let's say you have the following DataFrame named movies:



Notice how we have NaN (Not a Number) values in some rows. This is common because real-world datasets often have missing or incomplete data.

If you call movies.info(), you'll get the following output:

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5 entries, 0 to 4
Data columns (total 8 columns):
 #   Column           Non-Null Count  Dtype
---  ------           --------------  -----
 0   title            5 non-null      object
 1   release_date     5 non-null      object
 2   genre            5 non-null      object
 3   studio           5 non-null      object
 4   budget           4 non-null      float64
 5   box_office       4 non-null      float64
 6   runtime_minutes  5 non-null      int64
 7   rating           5 non-null      float64
dtypes: float64(3), int64(1), object(4)
memory usage: 312.0+ bytes

There are a few notable pieces of information in this output:

5 entries means that there are 5 rows in the dataset.
The budget and box_office columns are each missing 1 value (only 4 non-null).
The Dtype data describes the data type of each column.
Decimal numbers are stored as float64 and whole numbers are stored as int64.
Columns that store Strings are represented by object. If columns stored other complex data types, like dictionaries, dates, or user-defined objects would also appear as object.
In short, .info() can be used to gain a quick understanding of the data types stored in your DataFrame as well as how much data is missing.

## Summary Statistics with .describe()
Let's say you wanted to find the average budget of movies in your DataFrame. You can use .describe() to get a printout of summary statistics (mean, min, max, standard deviation, etc.) for every numeric column:

movies.describe()



This shows that the average budget of our movies is 7.3250000e+07, or 73,250,000.

.describe() only calculates summary statistics for numeric columns since many of these stats wouldn't make sense for Strings.

However, adding include='all' inside allows us to view stats about non-numeric columns:




